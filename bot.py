import os
from aiogram import Bot, Dispatcher, executor, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from parsers import Parsers

#my_secret = os.environ['Token']

pars = Parsers()
pars.get_map()

bot = Bot(token="TOKEN")
dp = Dispatcher(bot,storage=MemoryStorage())

class FSMadmin(StatesGroup):
    input = State()
    input2 = State()
    

@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton("üëã –ü—Ä–∏–≤–µ—Ç –ê–Ω–¥—Ä–µ–π")
    btn2 = types.KeyboardButton("‚öîÔ∏è –ö–∞—Ä—Ç–∞")
    btn4 = types.KeyboardButton("üì∞ –ù–æ–≤–æ—Å—Ç–∏")
    btn3 = types.KeyboardButton("üê± –û–ø–∞")
    markup.add(btn1, btn2, btn4).row(btn3)
    await message.answer(text="–ü—Ä–∏–≤–µ—Ç, —á—Ç–æ —Ö–æ—á–µ—à—å?", reply_markup = markup)


@dp.message_handler(content_types=['text'])
async def func(message):
    if (message.text == "üëã –ü—Ä–∏–≤–µ—Ç –ê–Ω–¥—Ä–µ–π"):
        await message.reply(text="–ü—Ä–∏–≤–µ—Ç")

    elif (message.text == '‚öîÔ∏è –ö–∞—Ä—Ç–∞'):
        try:
            photo = open('images/map2.png', 'rb')
            await bot.send_photo(message.chat.id,photo)
            photo.close()
        except Exception as exc:
            print(exc)
            await message.answer(text='–ù–æ–≤—É—é –∫–∞—Ä—Ç—É –µ—â—ë –Ω–µ –∑–∞–≤–µ–∑–ª–∏.')

    elif (message.text == 'üê± –û–ø–∞'):
        inline_btn_1 = types.InlineKeyboardButton('–•–æ—á—É –µ—â—ë', callback_data='next_image')
        inline_kb = types.InlineKeyboardMarkup()
        inline_kb.add(inline_btn_1)
        pars.cotochel()
        photo= open('images/cotochel.png', 'rb')
        await bot.send_photo(photo=photo, chat_id=message.chat.id ,reply_markup=inline_kb)
        photo.close()

    elif (message.text == "üì∞ –ù–æ–≤–æ—Å—Ç–∏"):
        inline_btn_1 = types.InlineKeyboardButton('–°–ª–µ–¥—É—é—â–∞—è –Ω–æ–≤–æ—Å—Ç—å', callback_data='next_news')
        inline_kb = types.InlineKeyboardMarkup()
        inline_kb.add(inline_btn_1)
        await message.answer(text=pars.news(), reply_markup=inline_kb)


@dp.callback_query_handler(text='next_image')
async def process_callback_button1(callback_query: types.CallbackQuery):
    inline_btn_1 = types.InlineKeyboardButton('–ù—É–∂–Ω–æ –±–æ–ª—å—à–µ –∫–æ—à–µ–∫', callback_data='next_image')
    inline_kb = types.InlineKeyboardMarkup()
    inline_kb.add(inline_btn_1)
    pars.cotochel()
    photo= open('images/cotochel.png', 'rb')
    await callback_query.bot.send_photo(photo=photo, chat_id=callback_query.message.chat.id ,reply_markup=inline_kb)
    await callback_query.answer()

@dp.callback_query_handler(text='next_news')
async def process_callback_button1(callback_query: types.CallbackQuery):
    inline_btn_1 = types.InlineKeyboardButton('–°–ª–µ–¥—É—é—â–∞—è –Ω–æ–≤–æ—Å—Ç—å', callback_data='next_news')
    inline_kb = types.InlineKeyboardMarkup()
    inline_kb.add(inline_btn_1)
    await callback_query.bot.send_message(text=pars.next_news(), chat_id=callback_query.message.chat.id ,reply_markup=inline_kb)
    await callback_query.answer()


executor.start_polling(dp, skip_updates=True)
